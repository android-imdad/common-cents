import 'dart:io';

import 'package:flutter/cupertino.dart';
import 'package:hive/hive.dart';
import 'package:hive_flutter/adapters.dart';
import 'package:path_provider/path_provider.dart';

import 'expense.dart';

class ExpenseService {
  static const String _boxName = 'expensesBox';
  static bool _isHiveInitialized = false; // Track initialization

  // --- Initialization ---
  static Future<void> initHive() async {
    // Prevent re-initialization
    if (_isHiveInitialized) {
      debugPrint("Hive already initialized.");
      // Ensure box is open if already initialized (e.g., hot restart)
      if (!Hive.isBoxOpen(_boxName)) {
        try {
          await Hive.openBox<Expense>(_boxName);
          debugPrint("Hive box '$_boxName' reopened successfully.");
        } catch (e) {
          debugPrint("Error reopening Hive box '$_boxName': $e");
        }
      }
      return;
    }

    debugPrint("Attempting to initialize Hive...");
    try {
      final Directory appDocumentDir = await getApplicationDocumentsDirectory();
      await Hive.initFlutter(appDocumentDir.path);
      debugPrint("Hive.initFlutter completed at path: ${appDocumentDir.path}");

      // Register the adapter generated by build_runner
      if (!Hive.isAdapterRegistered(ExpenseAdapter().typeId)) {
        debugPrint("Registering ExpenseAdapter...");
        Hive.registerAdapter(ExpenseAdapter());
        debugPrint("ExpenseAdapter registered.");
      } else {
        debugPrint("ExpenseAdapter already registered.");
      }

      // Open the box
      debugPrint("Opening Hive box '$_boxName'...");
      await Hive.openBox<Expense>(_boxName);
      _isHiveInitialized = true; // Mark as initialized
      debugPrint("Hive initialized and box '$_boxName' opened successfully.");
      debugPrint("Initial data in box: ${Hive.box<Expense>(_boxName).values.length} items.");


    } catch (e, stacktrace) {
      // Log detailed error during initialization
      debugPrint("############# HIVE INITIALIZATION ERROR #############");
      debugPrint("Error initializing Hive: $e");
      debugPrint("Stacktrace: $stacktrace");
      debugPrint("############# END HIVE ERROR #############");
      // Consider showing an error message to the user
    }
  }

  // --- Get Hive Box ---
  Box<Expense> get _expenseBox {
    if (!_isHiveInitialized || !Hive.isBoxOpen(_boxName)) {
      debugPrint("WARNING: Accessing _expenseBox before Hive is fully initialized or box is open!");
      // Attempt to return the box anyway, might throw error which is informative
      try {
        return Hive.box<Expense>(_boxName);
      } catch (e) {
        debugPrint("FATAL: Could not get Hive box '$_boxName'. Error: $e");
        // Depending on app structure, might need to throw or handle differently
        rethrow; // Rethrow the error to make the problem visible
      }
    }
    return Hive.box<Expense>(_boxName);
  }

  // --- Add Expense ---
  Future<void> addExpense(Expense expense) async {
    debugPrint("Attempting to add expense: $expense");
    try {
      final box = _expenseBox; // Get box instance
      final key = await box.add(expense);
      debugPrint("Expense added successfully with key: $key. Box size: ${box.length}");
    } catch (e, stacktrace) {
      debugPrint("############# HIVE ADD ERROR #############");
      debugPrint("Error adding expense: $e");
      debugPrint("Stacktrace: $stacktrace");
      debugPrint("############# END HIVE ERROR #############");
      // Rethrow or handle error appropriately
      rethrow;
    }
  }

  // --- Delete Expense ---
  Future<void> deleteExpense(dynamic key) async {
    debugPrint("Attempting to delete expense with key: $key");
    try {
      final box = _expenseBox; // Get box instance
      await box.delete(key);
      debugPrint("Expense deleted with key: $key. Box size: ${box.length}");
    } catch (e, stacktrace) {
      debugPrint("############# HIVE DELETE ERROR #############");
      debugPrint("Error deleting expense with key $key: $e");
      debugPrint("Stacktrace: $stacktrace");
      debugPrint("############# END HIVE ERROR #############");
      rethrow;
    }
  }

  // --- Get All Expenses ---
  ValueNotifier<List<Expense>> get expensesNotifier {
    debugPrint("Creating expensesNotifier...");
    if (!_isHiveInitialized || !_expenseBox.isOpen) {
      debugPrint("WARNING: Creating expensesNotifier, but Hive box might not be ready.");
      // Return a notifier with an empty list initially if box isn't ready
      return ValueNotifier<List<Expense>>([]);
    }

    // Initial load
    final List<Expense> initialExpenses = _expenseBox.values.toList();
    debugPrint("Notifier initial load: ${initialExpenses.length} expenses from box.");
    final notifier = ValueNotifier<List<Expense>>(initialExpenses);

    // Listen for changes in the box and update the notifier
    try {
      final listener = _expenseBox.listenable();
      listener.addListener(() {
        final currentExpenses = _expenseBox.values.toList();
        debugPrint("Hive box listener triggered. Updating notifier with ${currentExpenses.length} expenses.");
        notifier.value = currentExpenses;
      });
      debugPrint("Attached listener to Hive box.");
    } catch (e) {
      debugPrint("Error attaching Hive listener: $e");
    }

    return notifier;
  }

  // --- Calculation Logic ---

  // Helper to check if a date is today
  bool _isToday(DateTime date) {
    final now = DateTime.now();
    return date.year == now.year && date.month == now.month && date.day == now.day;
  }

  // Helper to check if a date is within the current week (assuming Monday is start)
  bool _isThisWeek(DateTime date) {
    final now = DateTime.now();
    // Adjust 'now' to the start of the current week (Monday)
    final startOfWeek = now.subtract(Duration(days: now.weekday - 1));
    // Adjust 'date' to the start of its day to avoid time issues
    final dateOnly = DateTime(date.year, date.month, date.day);
    final startOfWeekOnly = DateTime(startOfWeek.year, startOfWeek.month, startOfWeek.day);
    // End of the week (Sunday)
    final endOfWeek = startOfWeekOnly.add(const Duration(days: 6));

    return dateOnly.isAfter(startOfWeekOnly.subtract(const Duration(days: 1))) && // >= Start of week
        dateOnly.isBefore(endOfWeek.add(const Duration(days: 1))); // <= End of week
  }


  // Helper to check if a date is within the current month
  bool _isThisMonth(DateTime date) {
    final now = DateTime.now();
    return date.year == now.year && date.month == now.month;
  }

  // Helper to check if a date is within the current year
  bool _isThisYear(DateTime date) {
    final now = DateTime.now();
    return date.year == now.year;
  }

  // Calculate total spend for a given period filter
  double _calculateTotalSpend(bool Function(DateTime) filter, List<Expense> expenses) {
    return expenses
        .where((e) => filter(e.timestamp))
        .fold(0.0, (sum, item) => sum + item.amount);
  }

  // Calculate Daily Spend
  double getDailySpend(List<Expense> expenses) => _calculateTotalSpend(_isToday, expenses);

  // Calculate Weekly Spend
  double getWeeklySpend(List<Expense> expenses) => _calculateTotalSpend(_isThisWeek, expenses);

  // Calculate Monthly Spend
  double getMonthlySpend(List<Expense> expenses) => _calculateTotalSpend(_isThisMonth, expenses);

  // Calculate Yearly Spend
  double getYearlySpend(List<Expense> expenses) => _calculateTotalSpend(_isThisYear, expenses);


  // --- Average Calculation Logic ---
  // --- Rolling Average Calculation Logic --- NEW ---
  Map<String, double> getAverageSpending(List<Expense> expenses) {
    if (expenses.isEmpty) {
      return {'daily': 0.0, 'weekly': 0.0, 'monthly': 0.0, 'yearly': 0.0};
    }

    final now = DateTime.now();
    final today = DateTime(now.year, now.month, now.day); // Use midnight for comparisons

    // --- Average Daily (Last 30 days) ---
    const dailyWindow = 30;
    final thirtyDaysAgo = today.subtract(const Duration(days: dailyWindow));
    final expensesLast30Days = expenses.where((e) {
      final expenseDate = DateTime(e.timestamp.year, e.timestamp.month, e.timestamp.day);
      // Include today, exclude day 30 days ago
      return !expenseDate.isBefore(thirtyDaysAgo) && expenseDate.isBefore(today.add(const Duration(days:1)));
    }).toList();
    final totalSpendLast30Days = expensesLast30Days.fold(0.0, (sum, item) => sum + item.amount);
    // Divide by the window size (30 days) regardless of how many days had expenses
    final avgDaily = totalSpendLast30Days / dailyWindow;


    // --- Average Weekly (Last 4 Weeks / 28 days) ---
    const weeklyWindowDays = 28;
    const weeklyWindowWeeks = 4;
    final twentyEightDaysAgo = today.subtract(const Duration(days: weeklyWindowDays));
    final expensesLast4Weeks = expenses.where((e) {
      final expenseDate = DateTime(e.timestamp.year, e.timestamp.month, e.timestamp.day);
      // Include today, exclude day 28 days ago
      return !expenseDate.isBefore(twentyEightDaysAgo) && expenseDate.isBefore(today.add(const Duration(days:1)));
    }).toList();
    final totalSpendLast4Weeks = expensesLast4Weeks.fold(0.0, (sum, item) => sum + item.amount);
    // Divide by the number of weeks in the window
    final avgWeekly = (weeklyWindowWeeks > 0) ? totalSpendLast4Weeks / weeklyWindowWeeks : 0.0;


    // --- Average Monthly (Last 3 Months) ---
    const monthlyWindowMonths = 3;
    // Calculate the first day of the month 3 months ago
    final firstDayOfRelevantMonth = DateTime(now.year, now.month - monthlyWindowMonths + 1, 1);
    final expensesLast3Months = expenses.where((e) {
      final expenseDate = DateTime(e.timestamp.year, e.timestamp.month, e.timestamp.day);
      // Check if the expense date is on or after the start of the 3-month window
      // and before the start of the current day + 1 (i.e. includes today)
      return !expenseDate.isBefore(firstDayOfRelevantMonth) && expenseDate.isBefore(today.add(const Duration(days:1)));
    }).toList();
    final totalSpendLast3Months = expensesLast3Months.fold(0.0, (sum, item) => sum + item.amount);
    // Divide by the number of months in the window
    final avgMonthly = (monthlyWindowMonths > 0) ? totalSpendLast3Months / monthlyWindowMonths : 0.0;


    // --- Average Yearly (Extrapolated from Monthly) ---
    // Based on the average of the last 3 months
    final avgYearly = avgMonthly * 12;

    debugPrint("Rolling Avg Calc: Daily (Last 30d)= $avgDaily, Weekly (Last 4w)= $avgWeekly, Monthly (Last 3m)= $avgMonthly, Yearly (Est)= $avgYearly");

    return {
      'daily': avgDaily,
      'weekly': avgWeekly,
      'monthly': avgMonthly,
      'yearly': avgYearly,
    };
  }

  // --- Close Box ---
  Future<void> close() async {
    // Generally not needed to call manually unless specific cleanup is required
    try {
      if (_expenseBox.isOpen) {
        debugPrint("Attempting to close Hive box '$_boxName'...");
        await _expenseBox.close();
        debugPrint("Hive box '$_boxName' closed.");
      } else {
        debugPrint("Hive box '$_boxName' was already closed.");
      }
    } catch (e) {
      debugPrint("Error closing Hive box: $e");
    }
  }
}
