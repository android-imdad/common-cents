plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

// 1. Initialize a new Properties object
def keystoreProperties = new Properties()

// 2. Define the location of the properties file
def keystorePropertiesFile = rootProject.file("key.properties")

// 3. Check if the file exists before trying to read it
if (keystorePropertiesFile.exists()) {
    // 4. Load the properties from the file
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace "lk.spacewa.rupiyal"
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion = "27.0.12077973"
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "lk.spacewa.rupiyal"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion 23
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }
    signingConfigs {
        release {
            // Release keystore file access is commented below and debug keystore files are used in the play console for release mode for now (there was a certificate issue with release mode keystore file).
            /*TODO:
            rename debug-keystore.jks to release-keystore.jks and also check upload-keystore.jks can be used for debug mode.
            Do the necessary changes in key.properties as well.
            */
             storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
             keyAlias keystoreProperties['keyAlias']
             keyPassword keystoreProperties['keyPassword']
             storePassword keystoreProperties['storePassword']
            // storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            // keyAlias keystoreProperties['keyAlias']
            // keyPassword keystoreProperties['keyPassword']
            // storePassword keystoreProperties['storePassword']

        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release
        }
    }
}

flutter {
    source '../..'
}

dependencies {}
